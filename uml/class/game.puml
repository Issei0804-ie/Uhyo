@startuml
Presenter o-- Board
Board *-- Piece
iView <.. Presenter
iView <|.. view
BoardStateListener <|.. Presenter
BoardStateListener <-- Board
iPresenter <|.. Presenter
iPresenter <.. view

class Board {
    - pieces: List<Piece>
    - turn: Turn
    + initBoard()
    + getTurn(): Turn
    + putPiece(x, y)
    + checkPuttablePosition(x, y): Boolean
    + checkPuttablePosition(): List<Piece>
    + countBlackPiece(): Int
    + countWhitePiece(): Int
    - setTurn(Turn)
}

enum Turn {
    + BLACK
    + WHITE
}

interface BoardStateListener {
    + puttedPiece(piece: Piece)
    + reversedPiece(piece: Piece)
    + nextTurn(turn: Turn)
    + pass()
    + finishGame()
}

class Piece {
    - Turn status
    - int x
    - int y
    + reversePiece()
}

interface iView {
    + onStart()
    + onClickPauseButton()
    + onClickBoardPosition(x: Int, y: Int)
}

class view {}

interface iPresenter {
    showPutPiece(x: Int, y: Int, color: Turn)
    showReversePiece(x: Int, y: Int, color: Turn)
    showWhiteCount(n: Int)
    showBlackCount(n: Int)
    showPause()
    showPass()
    showTurn(color: Turn)
    showResult(winner: Turn)
    throwErrorText(text: String)
}
class Presenter {

}
@enduml
