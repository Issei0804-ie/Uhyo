@startuml
participant client
participant app_server
database Redis

== http_open ==
client -> app_server : クライアントの認証(ハードコーディング)を行う
app_server -> app_server :認証処理を行う
alt 認証OK
    app_server -> app_server : セッションIDを作成する
    app_server -> Redis : セッションIDを保存する
    app_server -> client : セッションIDを返す
else 認証NG
    app_server -> client : エラー処理
end

== http_close ==


== websocket_open ==
client -> app_server : マッチングリクエスト(セッションID)
app_server -> Redis :セッションIDの取得
app_server -> app_server : セッションIDの存在を確認
alt 不正なセッションID
    app_server -> client : エラー処理
    app_server -x client : セッション切断
end

... マッチング処理中 ...
app_server -> Redis :セッションIDとルームIDの紐付け(UUID等)
alt マッチング完了
    app_server -> client : マッチング完了通知
    app_server -x client : セッション切断
end

== websocket_close ==

== websocket_open ==
client -> app_server : ゲームリクエスト(セッションID)
app_server -> Redis :セッションIDの取得
app_server -> app_server : セッションIDの存在を確認
alt 不正なセッションID
    app_server -> client : エラー処理
    app_server -x client : セッション切断
end

app_server -> app_server : セッションIDに紐付けられたルームIDを確認

alt ルームが存在しない
    app_server -> client : エラー処理
    app_server -x client : セッション切断
end

loop infinity
client --> app_server : Request
    alt Get_board_data
        activate app_server
        app_server --> client : Response_board_data
        deactivate app_server
    else Submit_board_data
        alt 自分のターン
        app_server --> client : Response_board_data
        else
        app_server --> client : Response_error
        end
        deactivate app_server
    else Request_finish_game
        alt 一定時間経過外 or アプリ側からセッションを切る
            app_server --x client : disconnect
            app_server -> Redis : セッションID, ルームIDの破棄
        end
    end
end

== websocket_close ==


@enduml
